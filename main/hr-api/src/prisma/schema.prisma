generator client {
  binaryTargets = ["native", "linux-musl"]
  provider      = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username String @unique
  email    String @unique
  password String

  firstName  String
  lastName   String
  middleName String?

  staff        Staff?
  accountRoles AccountRole[]

  @@map("accounts")
}

model Role {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  key         String  @unique
  description String?

  accountRoles           AccountRole[]
  roleFeaturePermissions RoleFeaturePermission[]

  @@map("roles")
}

model AccountRole {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account   Account @relation(fields: [accountId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  accountId String  @db.ObjectId

  role   Role   @relation(fields: [roleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  roleId String @db.ObjectId

  @@unique([accountId, roleId])
  @@map("account_roles")
}

model Permission {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  key String @unique

  roleFeaturePermissions RoleFeaturePermission[]

  @@map("permissions")
}

model RoleFeaturePermission {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role   Role   @relation(fields: [roleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  roleId String @db.ObjectId

  permission   Permission @relation(fields: [permissionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  permissionId String     @db.ObjectId

  feature   Feature? @relation(fields: [featureId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  featureId String?  @db.ObjectId

  @@unique([roleId, permissionId, featureId])
  @@map("role_feature_permissions")
}

model Feature {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?

  roleFeaturePermissions RoleFeaturePermission[]

  @@map("features")
}

model Staff {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName  String
  lastName   String
  middleName String?

  startDate DateTime
  endDate   DateTime?

  account   Account? @relation(fields: [accountId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  accountId String?  @unique @db.ObjectId

  jobPosition   JobPosition? @relation(fields: [jobPositionId], references: [id])
  jobPositionId String?      @db.ObjectId

  jobLevel   JobLevel? @relation(fields: [jobLevelId], references: [id])
  jobLevelId String?   @db.ObjectId

  leaveAssignments   LeaveAssignment[]
  projectAssignments ProjectAssignment[]
  skillAssignments   SkillAssignment[]

  avatar   File?   @relation(fields: [avatarId], references: [id])
  avatarId String? @db.ObjectId

  objectives Objective[]
  staffKeyResults StaffKeyResult[]
  @@map("staffs")
}

model File {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  context   String
  extension String?
  name      String
  path      String?
  size      Int     @default(0)

  staffs Staff[]
  skills Skill[]

  @@map("files")
}

enum ProjectStatusEnum {
  active
  cancelled
  completed
  pending
}

model Project {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?
  priority    String?
  status      ProjectStatusEnum @default(active)

  type   ProjectType? @relation(fields: [typeId], references: [id])
  typeId String?      @db.ObjectId

  priceType   ProjectPriceType? @relation(fields: [priceTypeId], references: [id])
  priceTypeId String?           @db.ObjectId

  startDate DateTime
  endDate   DateTime?

  projectAssignments ProjectAssignment[]

  @@map("projects")
}

model ProjectPriceType {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String  @unique
  description String?

  projects Project[]

  @@map("project_price_types")
}

model ProjectType {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String  @unique
  description String?

  projects Project[]

  @@map("project_types")
}

model ProjectRole {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String  @unique
  description String?

  projectAssignments ProjectAssignment[]

  @@map("project_roles")
}

model ProjectAssignment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role   ProjectRole @relation(fields: [roleId], references: [id], onUpdate: Cascade)
  roleId String      @db.ObjectId

  staff   Staff  @relation(fields: [staffId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  staffId String @db.ObjectId

  project   Project @relation(fields: [projectId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  projectId String  @db.ObjectId

  workload Float

  startDate DateTime
  endDate   DateTime?

  @@unique([staffId, roleId, projectId])
  @@map("project_assignments")
}

model LeaveType {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?

  leaveAssignments LeaveAssignment[]

  @@map("leave_types")
}

model LeaveAssignment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  startDate DateTime
  endDate   DateTime?
  duration  Float
  reason    String?

  type   LeaveType @relation(fields: [typeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  typeId String    @db.ObjectId

  staff   Staff  @relation(fields: [staffId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  staffId String @db.ObjectId

  @@map("leave_assignments")
}

model Skill {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String  @unique
  description String?

  thumbnail   File?   @relation(fields: [thumbnailId], references: [id])
  thumbnailId String? @db.ObjectId

  skillAssignments SkillAssignment[]

  @@map("skill_types")
}

model SkillLevel {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String  @unique
  description String?
  ordinal Int

  skillAssignments SkillAssignment[]

  @@map("skill_levels")
}

model SkillAssignment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  skill   Skill  @relation(fields: [skillId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  skillId String @db.ObjectId

  staff   Staff  @relation(fields: [staffId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  staffId String @db.ObjectId

  level   SkillLevel @relation(fields: [levelId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  levelId String     @db.ObjectId

  yearOfExp Float
  primary   Boolean @default(true)

  @@unique([skillId, staffId])
  @@map("skill_assignments")
}

model JobPosition {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String  @unique
  shortName String?

  description   String?
  specification String?

  staffs Staff[]

  @@map("job_positions")
}

model JobLevel {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String  @unique
  description String?

  staffs Staff[]

  @@map("job_levels")
}

model Dashboard {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chartId String @unique
  label   String
  data    String

  @@map("dashboard")
}

enum KeyResultType {
  NUMBER    
  PERCENT    
  BOOLEAN   
}

model Objective {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  description String?

  startDate DateTime
  endDate DateTime

  progress Float @default(0)

  keyResults     KeyResult[]  
  staff Staff @relation(fields: [staffId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  staffId String @db.ObjectId 

  @@map("objective")
}

model KeyResult {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  type   KeyResultType
  value Float // Value of Key in objective
  deadline DateTime

  percent Float?

  objective      Objective        @relation(fields: [objectiveId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  objectiveId String @db.ObjectId

  numberData   KeyResultNumber?
  booleanData KeyResultBoolean?
  percentData  KeyResultPercent?

  staffKeyResults StaffKeyResult[]
  @@map("key_result")
}

model KeyResultNumber {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  keyResult    KeyResult  @relation(fields: [keyResultId], references: [id], onDelete: Cascade)
  keyResultId  String     @db.ObjectId @unique
  target        Float      
}

model KeyResultBoolean {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  keyResult    KeyResult  @relation(fields: [keyResultId], references: [id], onDelete: Cascade)
  keyResultId  String     @db.ObjectId @unique
}

model KeyResultPercent {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  keyResult    KeyResult  @relation(fields: [keyResultId], references: [id], onDelete: Cascade)
  keyResultId  String     @db.ObjectId @unique
  targetPercent Float     
}

model StaffKeyResult{
   id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  staff Staff @relation(fields: [staffId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  staffId String @db.ObjectId

  keyResult KeyResult @relation(fields: [keyResultId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  keyResultId String @db.ObjectId

  isComplete Boolean @default(false)
  currentValue Float

  @@unique([staffId, keyResultId])
  @@map("staff_key_result")
}



