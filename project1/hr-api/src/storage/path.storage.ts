import { diskStorage } from 'multer'
import * as path from 'path'
import * as fs from 'fs'
import * as multer from 'multer'
import { Request } from 'express'

function createSlug(str: string): string {
   return str
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '')
      .replace(/ƒë/g, 'd')
      .replace(/ƒê/g, 'D')
      .replace(/\s+/g, '_')
      .replace(/[^\w\-.]/g, '')
}

export const storage = (context: string) => {
   return multer.diskStorage({
      destination: (req, file, callback) => {
         const uploadPath = context ? `./uploads/${context}` : './uploads/file'
         fs.mkdirSync(uploadPath, { recursive: true })
         callback(null, uploadPath)
      },
      filename: (req: Request, file, callback) => {
         const uploadPath = context ? `./uploads/${context}` : './uploads/file'
         const extension = path.extname(file.originalname)
         const nameWithoutExt = path.basename(file.originalname, extension)
         const sanitizedFileName = createSlug(nameWithoutExt)
         const id = req.params.id // L·∫•y ID t·ª´ request params
         const finalFileName = id
            ? `${id}${extension}`
            : `${Date.now()}${extension}`

         // üîπ Ki·ªÉm tra v√† x√≥a file c≈© tr∆∞·ªõc khi l∆∞u file m·ªõi (S·ª≠ d·ª•ng fs.readdirSync ƒë·ªÉ ƒë·ªìng b·ªô)
         if (id) {
            try {
               const files = fs.readdirSync(uploadPath)
               for (const file of files) {
                  if (file.startsWith(`${id}-`)) {
                     const oldFilePath = path.join(uploadPath, file)
                     fs.unlinkSync(oldFilePath) // X√≥a file ngay l·∫≠p t·ª©c
                     console.log(`üóëÔ∏è ƒê√£ x√≥a file c≈©: ${file}`)
                  }
               }
            } catch (err) {
               console.error('‚ùå L·ªói khi ƒë·ªçc th∆∞ m·ª•c:', err)
            }
         }

         callback(null, finalFileName)
      }
   })
}
